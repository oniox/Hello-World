curl -s "https://${VAULT_NAME}.vault.azure.net/secrets/${SECRET_NAME}?api-version=7.4" \
  -H "Authorization: Bearer ${ACCESS_TOKEN}" \
  | jq -r '.value'

#!/bin/bash

# Set your variables
VAULT_NAME="mykeyvault"
SECRET_NAME="mySecretName"
TENANT_ID="your-tenant-id"
CLIENT_ID="your-client-id"
CLIENT_SECRET="your-client-secret"

# Get access token
TOKEN_RESPONSE=$(curl -s -X POST \
  "https://login.microsoftonline.com/${TENANT_ID}/oauth2/v2.0/token" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "client_id=${CLIENT_ID}" \
  -d "scope=https://vault.azure.net/.default" \
  -d "client_secret=${CLIENT_SECRET}" \
  -d "grant_type=client_credentials")

# Extract access token using jq
ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')

if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" == "null" ]; then
  echo "Failed to get access token"
  echo "$TOKEN_RESPONSE" | jq
  exit 1
fi

# Get secret and extract value
SECRET_RESPONSE=$(curl -s -X GET \
  "https://${VAULT_NAME}.vault.azure.net/secrets/${SECRET_NAME}?api-version=7.4" \
  -H "Authorization: Bearer ${ACCESS_TOKEN}")

SECRET_VALUE=$(echo "$SECRET_RESPONSE" | jq -r '.value')

if [ -z "$SECRET_VALUE" ] || [ "$SECRET_VALUE" == "null" ]; then
  echo "Failed to get secret value"
  echo "$SECRET_RESPONSE" | jq
  exit 1
fi

echo "The secret value is: $SECRET_VALUE"



#!/bin/bash

# Initialize cache variable
SECRET_CACHE=""

get_secret_value() {
    local secret_name=$1
    
    # Check cache first
    if [ -n "$SECRET_CACHE" ]; then
        echo "Using cached secret" >&2
        echo "$SECRET_CACHE"
        return
    fi

    # Fetch from Azure Key Vault
    echo "Fetching fresh secret from Azure Key Vault..." >&2
    local response=$(curl -s -X GET \
        "https://${VAULT_NAME}.vault.azure.net/secrets/${secret_name}?api-version=7.4" \
        -H "Authorization: Bearer ${ACCESS_TOKEN}")
    
    # Extract value and cache it
    SECRET_CACHE=$(echo "$response" | jq -r '.value')
    
    if [ -z "$SECRET_CACHE" ] || [ "$SECRET_CACHE" = "null" ]; then
        echo "Error retrieving secret" >&2
        return 1
    fi
    
    echo "$SECRET_CACHE"
}

# Usage example:
VAULT_NAME="mykeyvault"
ACCESS_TOKEN="your_access_token"

# First call - fetches from Azure
secret1=$(get_secret_value "mySecret")
echo "First secret value: $secret1"

# Second call - uses cached value
secret2=$(get_secret_value "mySecret") 
echo "Second secret value: $secret2"