import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

@RestController
public class CsvController {

    @PostMapping("/upload")
    public ResponseEntity<String> uploadCsv(@RequestParam("file") MultipartFile file) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream()))) {
            CSVParser parser = new CSVParser(reader, CSVFormat.DEFAULT.withFirstRecordAsHeader());
            List<CsvData> csvData = new ArrayList<>();
            for (CSVRecord record : parser) {
                CsvData data = new CsvData();
                data.setField1(record.get("field1"));
                data.setField2(record.get("field2"));
                // ... populate other fields
                csvData.add(data);
            }
            // Do something with the csvData, e.g., save to database
            return ResponseEntity.ok("CSV file processed successfully");
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error processing CSV file");
        }
    }
}



import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(CsvController.class)
public class CsvControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private CsvService csvService; // Assuming a service layer for CSV processing

    // ...
}

@Test
public void testUploadCsv() throws Exception {
    // Create a mock CSV file
    MockMultipartFile file = new MockMultipartFile("file", "test.csv", MediaType.TEXT_CSV_VALUE, "some,csv,data".getBytes());

    // Mock the CSV service behavior
    // ...

    mockMvc.perform(MockMvcRequestBuilders.multipart("/upload")
                    .file(file))
            .andExpect(status().isOk());

    // Verify that the CSV service was called with the correct data
    // verify(csvService).processCsv(any(List.class));
}